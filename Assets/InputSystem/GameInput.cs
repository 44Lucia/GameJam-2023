//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""1a079dc0-0fa8-4eb2-82f8-934193cc6a90"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0e8f4c6d-d912-4ce5-98d7-60848098cbf1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovePlayer2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bc332a15-e0df-4b5c-aaa7-dcc2736a291e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""5a07df7d-8714-4c5c-90ad-e6445b7dc5b6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0407a6a1-8c1a-45b0-badb-72edd97a5be9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8df8f5ec-e6c8-45d1-981b-35aac59bca18"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""e38f11d4-fdea-4ef3-bf5d-c7d520c3d383"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f649f953-eb62-4c74-936f-21be5da5d1ef"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce0130d5-7c27-49b5-8419-a3566ca2e8f2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Navigation"",
            ""id"": ""bd2585a7-cff7-4337-b634-04e3a473b0de"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bb75e1ba-c114-42db-b071-675e0e6225a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8ec8dde-b865-49f3-909b-6216467353da"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_MovePlayer1 = m_Character.FindAction("MovePlayer1", throwIfNotFound: true);
        m_Character_MovePlayer2 = m_Character.FindAction("MovePlayer2", throwIfNotFound: true);
        // Navigation
        m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
        m_Navigation_Newaction = m_Navigation.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_MovePlayer1;
    private readonly InputAction m_Character_MovePlayer2;
    public struct CharacterActions
    {
        private @GameInput m_Wrapper;
        public CharacterActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer1 => m_Wrapper.m_Character_MovePlayer1;
        public InputAction @MovePlayer2 => m_Wrapper.m_Character_MovePlayer2;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @MovePlayer1.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer1.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer1.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer2.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer2;
                @MovePlayer2.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer2;
                @MovePlayer2.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovePlayer2;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovePlayer1.started += instance.OnMovePlayer1;
                @MovePlayer1.performed += instance.OnMovePlayer1;
                @MovePlayer1.canceled += instance.OnMovePlayer1;
                @MovePlayer2.started += instance.OnMovePlayer2;
                @MovePlayer2.performed += instance.OnMovePlayer2;
                @MovePlayer2.canceled += instance.OnMovePlayer2;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    // Navigation
    private readonly InputActionMap m_Navigation;
    private INavigationActions m_NavigationActionsCallbackInterface;
    private readonly InputAction m_Navigation_Newaction;
    public struct NavigationActions
    {
        private @GameInput m_Wrapper;
        public NavigationActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Navigation_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Navigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
        public void SetCallbacks(INavigationActions instance)
        {
            if (m_Wrapper.m_NavigationActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_NavigationActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_NavigationActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_NavigationActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_NavigationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public NavigationActions @Navigation => new NavigationActions(this);
    public interface ICharacterActions
    {
        void OnMovePlayer1(InputAction.CallbackContext context);
        void OnMovePlayer2(InputAction.CallbackContext context);
    }
    public interface INavigationActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
